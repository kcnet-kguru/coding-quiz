현장에서는 프로그래머 A와 B가 동시에 금을 발견했다. 그들은 모두 금을 원했고, 금을 분배하기 위해 다음과 같은 규칙을 사용하기로 결정했다.

그들은 금을 n 더미로 나누어서 줄을 서 있었다. 각 말뚝의 양과 말뚝의 순서는 모두 랜덤하다.

그들은 번갈아 가며 맨 왼쪽이나 맨 오른쪽에서 금더미를 빼앗았다.

각 라운드에서 프로그래머는 자신에게 가장 좋은 금을 고르는 지혜를 발휘하게 된다.

Input
금을 나타내는 정수 배열.
Output
A와 B가 2소 배열을 통해 얻은 금의 최종 산출량[A, B의 금액]
참고로, 우리는 A가 항상 우선시하고, 그때마다 그들이 최선의 전략을 사용했다고 가정할 수 있다.

Example
골드 = [10,1000,2,1]의 경우 출력은 [1001,12]이어야 한다.

1회전에서는 A가 10이나 1을 가져갈 수 있고, 10이 1보다 크다.
10개 고를까? 아니, 영리한 프로그래머는 그렇게 생각하지 않는다;-)
왜냐하면 A가 10을 선택하면 다음번 B가 1000을 선택할 수 있기 때문이다.
그래서 A select 1이 가장 좋은 선택이다.

두 번째 턴, B가 10을 선택하든 2를 선택하든, 세 번째 턴에서 A는 항상 1000을 선택할 수 있다.
그래서 B가 10을 고르는 것이 가장 좋은 선택이다.

Final result:
A: 1 + 1000 = 1001
B: 10 + 2 = 12
For golds = [10,1000,2], the output should be [12,1000].

이 예에서 A가 직면하는 선택은 앞의 예에서 2번째 턴과 동일하다.

Test Case
[4, 7, 2, 9, 5, 2] => [18, 11]
[10, 1000, 2, 1] => [1001, 12]
[10, 1000, 2] => [12, 1000]
[140, 649, 340, 982, 105, 86, 56, 610, 340, 879] => [3206, 981]