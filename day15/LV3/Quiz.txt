John과 Mary는 A,B,C... 마을 사이를 여행하기를 원한다. Mary는 이 도시들 사이의 거리 목록을 종이 한 장에 가지고 있다.

ls = [50, 55, 57, 58, 60] 존은 운전하는 데 지쳤고 메리에게 그는 174마일 이상을 운전하는 것을 원하지 않는다고 말했고 그는 단지 3개의 마을만을 방문할 것이다.

어느 거리를 선택할 것인가, 그래서 어느 마을을 선택할 것인가? 그 거리의 합이 메리와 존을 가장 기쁘게 할 수 있는 가장 효율적인 값은 무엇인가?

L 리스트 l과 3개의 마을을 방문하면 다음 중 하나를 선택할 수 있다.

[50,55,57],[50,55,58],[50,55,60],[50,57,58],[50,57,60],[50,58,60],[55,57,58],[55,57,60],[55,58,60],[57,58,60].

거리 합계는 162, 163, 165, 165, 167, 168, 170, 173, 175, 175이다.

174의 한도를 고려한 가장 큰 금액은 173이며, 해당 3개 읍의 거리는 [55, 58, 60]이다.

함수를 선택하는 BestSum(또는 언어에 따라 선택_best_sum 또는 ...)은 매개변수 t(최대 거리 합계, 정수 >= 0), k(방문할 타운 수, k >= 1) 및 ls(거리 목록, 모든 거리는 양의 정수 또는 null 정수이며 이 목록에는 최소한 하나의 요소가 있다. 

함수는 언어에 따라 "최상의" 합, 즉 주어진 한계 t보다 작거나 같은 k 거리의 최대 합계를 반환하며, 그 합이 존재하거나 그렇지 않으면 null, none 을 반환한다.

Examples:

ts = [50, 55, 56, 57, 58] choose_best_sum(163, 3, ts) -> 163

xs = [50] choose_best_sum(163, 3, xs) -> nil (or null or ... or -1 (C++, C, Rust, Swift, Go)

ys = [91, 74, 73, 85, 73, 81, 87] choose_best_sum(230, 3, ys) -> 228